// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String    @id @default(cuid())
  username           String    @unique
  password           String
  firstName          String
  lastName           String
  dateOfBirth        DateTime
  email              String    @unique
  phone              String    @unique
  school             String?
  gender             Gender
  profileDescription String?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime? @updatedAt
  avatarUrl          String?
  role               Role
  refreshToken       String?

  teacher Teacher?
  student Student?

  meetingParticipant MeetingParticipant[]
  meetingChat        MeetingChat[]
}

model Teacher {
  id                    String  @id @default(cuid())
  subjectSpecialization String?

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime    @default(now())
  updatedAt DateTime?   @updatedAt
  deletedAt DateTime?
  classroom Classroom[]
  meeting   Meeting[]
  quiz      Quiz[]
  question  Question[]
}

model Student {
  id String @id @default(cuid())

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  createdAt        DateTime           @default(now())
  updatedAt        DateTime?          @updatedAt
  deletedAt        DateTime?
  submission       Submission[]
  studentClassroom StudentClassroom[]
  studentGroup     StudentGroup[]
  quizAttempt      QuizAttempt[]
}

model Classroom {
  id          String    @id @default(cuid())
  name        String
  code        String    @unique
  description String?
  capacity    Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  teacherId        String
  teacher          Teacher            @relation(fields: [teacherId], references: [id])
  group            Group[]
  session          Session[]
  meeting          Meeting[]
  material         Material[]
  studentClassroom StudentClassroom[]
  studentGroup     StudentGroup[]
}

model Group {
  id        String    @id @default(cuid())
  name      String
  score     Int       @default(0)
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  deletedAt DateTime?

  classroomId  String
  classroom    Classroom      @relation(fields: [classroomId], references: [id])
  studentGroup StudentGroup[]
}

model Session {
  id          String    @id @default(cuid())
  title       String
  description String?
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  createdBy   String?
  deletedAt   DateTime?
  fileId      String?
  file        File?     @relation(fields: [fileId], references: [id])

  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id])
}

model SlidePage {
  id         String @id @default(cuid())
  slideOrder Int
  slideUrl   String

  fileId String?
  file   File?   @relation(fields: [fileId], references: [id])
}

model Meeting {
  id          String    @id @default(cuid())
  title       String
  description String?
  recordUrl   String?
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?
  createdBy   String?

  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id])

  hostId             String?
  host               Teacher?             @relation(fields: [hostId], references: [id])
  meetingParticipant MeetingParticipant[]
  meetingChat        MeetingChat[]
}

model MeetingParticipant {
  id       String   @id @default(cuid())
  joinedAt DateTime @default(now())

  meetingId String
  meeting   Meeting @relation(fields: [meetingId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model MeetingChat {
  id      String   @id @default(cuid())
  message String
  sendAt  DateTime @default(now())

  senderId String?
  sender   User?   @relation(fields: [senderId], references: [id])

  meetingId String
  meeting   Meeting @relation(fields: [meetingId], references: [id])
}

model Material {
  id          String    @id @default(cuid())
  title       String
  description String?
  type        String
  visibleTo   String?
  createdBy   String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime?
  deletedAt   DateTime?

  classroomId String
  classroom   Classroom    @relation(fields: [classroomId], references: [id])
  file        File[]
  assignment  Assignment[]
}

model File {
  id         String    @id @default(cuid())
  name       String
  url        String
  type       String
  uploadedBy String?
  createdAt  DateTime  @default(now())
  deletedAt  DateTime?

  materialId     String?
  material       Material?        @relation(fields: [materialId], references: [id])
  slidePage      SlidePage[]
  submission     Submission[]
  submissionFile SubmissionFile[]
  session        Session[]
}

model Assignment {
  id          String         @id @default(cuid())
  title       String
  description String
  startTime   DateTime
  dueTime     DateTime
  createdAt   DateTime?      @default(now())
  updatedAt   DateTime?      @updatedAt
  deletedAt   DateTime?
  type        AssignmentType

  materialId String?
  material   Material? @relation(fields: [materialId], references: [id])

  submission Submission[]
}

model Submission {
  id          String           @id @default(cuid())
  status      SubmissionStatus
  score       Int?
  feedback    String?
  submittedAt DateTime?        @default(now())
  updatedAt   DateTime?        @updatedAt
  deletedAt   DateTime?

  assignmentId String
  assignment   Assignment @relation(fields: [assignmentId], references: [id])

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  fileId         String?
  file           File?            @relation(fields: [fileId], references: [id])
  submissionFile SubmissionFile[]

  @@unique([assignmentId, studentId])
}

model SubmissionFile {
  id         String   @id @default(cuid())
  uploadedAt DateTime @default(now())

  submissionId String
  submission   Submission @relation(fields: [submissionId], references: [id])

  fileId String
  file   File   @relation(fields: [fileId], references: [id])
}

model Quiz {
  id          String    @id @default(cuid())
  title       String
  description String?
  timeLimit   Int?      @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  deletedAt   DateTime?

  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])

  quizAttempt QuizAttempt[]
}

model QuizAttempt {
  id        String    @id @default(cuid())
  startTime DateTime  @default(now())
  endTime   DateTime? @updatedAt
  score     Int?
  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  studentId String
  student   Student @relation(fields: [studentId], references: [id])

  quizId String
  quiz   Quiz   @relation(fields: [quizId], references: [id])
}

model Question {
  id             String           @id @default(cuid())
  content        String?
  timeLimit      Int?             @default(0)
  type           QuestionType
  createdAt      DateTime         @default(now())
  updatedAt      DateTime?        @updatedAt
  deletedAt      DateTime?
  score          Int?
  questionLink   QuestionLink[]
  questionEssay  QuestionEssay[]
  questionOption QuestionOption[]
  answer         Answer[]

  teacherId String?
  teacher   Teacher? @relation(fields: [teacherId], references: [id])
}

model QuestionLink {
  id         String     @id @default(cuid())
  linkedType LinkedType

  questionId String
  question   Question @relation(fields: [questionId], references: [id])

  linkedId String
  // Link to Quiz, Slide or Assignment

  deletedAt DateTime?
}

model QuestionEssay {
  id            String @id @default(cuid())
  correctAnswer String

  questionId String
  question   Question @relation(fields: [questionId], references: [id])

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model QuestionOption {
  id        String   @id @default(cuid())
  option    String
  isCorrect Boolean?

  questionId String
  question   Question @relation(fields: [questionId], references: [id])
  answer     Answer[]

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Answer {
  id        String     @id @default(cuid())
  type      AnswerType
  text      String?
  isCorrect Boolean?
  score     Int?
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  deletedAt DateTime?
  createdBy String?

  contextId String?
  // Reference to the context of the answer (QuizAttempt, Submission)

  questionId String
  question   Question @relation(fields: [questionId], references: [id])

  selectedOptionId String?
  selectedOption   QuestionOption? @relation(fields: [selectedOptionId], references: [id])
}

model StudentClassroom {
  id       String    @id @default(cuid())
  score    Int?      @default(0)
  joinedAt DateTime  @default(now())
  leftAt   DateTime?

  studentId   String
  student     Student   @relation(fields: [studentId], references: [id])
  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id])

  deletedAt DateTime?
  createdAt DateTime  @default(now())

  @@unique([studentId, classroomId])
}

model StudentGroup {
  id          String    @id @default(cuid())
  studentId   String
  student     Student   @relation(fields: [studentId], references: [id])
  groupId     String
  group       Group     @relation(fields: [groupId], references: [id])
  classroomId String
  classroom   Classroom @relation(fields: [classroomId], references: [id])

  createdAt DateTime  @default(now())
  deletedAt DateTime?

  @@unique([studentId, classroomId])
}

enum ResponseType {
  IMAGE
  DRAW
  TEXT
  FILE
}

enum AssignmentType {
  ASSIGNMENT
  QUIZ
}

enum SessionStatus {
  SCHEDULED
  INPROGRESS
  COMPLETED
}

enum SubmissionStatus {
  SUBMITTED
  GRADED
}

enum DocType {
  DOCX
  PPTX
  XLSX
  PPT
  DOC
  TXT
  PDF
  XLS
  PNG
  JPG
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum AnswerType {
  QUIZ
  SUBMISSION
}

enum MaterialType {
  LESSON
  ASSIGNMENT
  QUIZ
}

enum LinkedType {
  QUIZ
  SLIDE
  ASSIGNMENT
}

enum QuestionType {
  MCQ
  ESSAY
}

enum Role {
  STUDENT
  TEACHER
}
